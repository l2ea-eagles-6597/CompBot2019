// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6597.CompBot.subsystems;


import org.usfirst.frc6597.CompBot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ArmSub extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
public final double POSITION_BALL=1.0;
public final double POSITION_HATCH=.9;
public final double POSITION_R1=.75;
public final double POSITION_R2=.55;
public final double POSITION_C1=.9;
    public double desiredposition=POSITION_HATCH;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark aleft;
    private Spark aright;
    private AnalogPotentiometer pot1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public ArmSub() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        aleft = new Spark(2);
        addChild("Aleft",aleft);
        aleft.setInverted(false);
        
        aright = new Spark(3);
        addChild("Aright",aright);
        aright.setInverted(true);
        
        pot1 = new AnalogPotentiometer(0, 1.0, 0.0);
        addChild("Pot1",pot1);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArmCmd());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Voltage",pot1.get());
        SmartDashboard.putNumber("Setpoint", desiredposition);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
public void driveup (){
    aleft.set(.3);
    aright.set(.2);
} 
public void drivedown (){
    aleft.set(-.3);
    aright.set(-.3);
}
public void driveupfast (){
    aleft.set(.5);
    aright.set(.5);
} 
public void drivedownfast (){
    aleft.set(-.5);
    aright.set(-.5);
}
public void stop(){
    aleft.set(0);
    aright.set(0);
}


public void move (){
    double currentposition=pot1.get();
    double error=desiredposition-currentposition;
    if(Math.abs(error) > 0.15){
        if (error > 0){
            driveupfast();
        }
        else {
            drivedownfast();
        }
    }
    else if(Math.abs(error) > 0.09){
        if(error>0){
            driveup();
        
        }
        else if(error<0){
            drivedown();
        }
    }
    else {
        stop();
    }
}


}

